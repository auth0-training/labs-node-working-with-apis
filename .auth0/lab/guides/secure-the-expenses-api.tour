{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "3: Secure the Expenses API",
  "steps": [
    {
      "file": "src/api/api/index.js",
      "description": "## Add the Express OAuth 2 Bearer Node Module\nThe first step in securing our API, is to require the Express middleware we'll use to do so. \n\nNote that we've already added the middleware to the web app. \n\nNow, we're adding it to the index.js file for our Expenses API. \n\nLet's add the necessary Express middleware here with the following code:\n\n``` jsx\nconst { auth } = require(\"express-oauth2-jwt-bearer\");\n```\n, then proceed to the next step.\n",
      "line": 11,
      "selection": {
        "start": {
          "line": 11,
          "character": 1
        },
        "end": {
          "line": 11,
          "character": 67
        }
      }
    },
    {
      "file": "src/api/api/index.js",
      "description": "## Configure the API to use the Authentication Middleware\nNow, let's configure the API to use the middleware for all requests. \n\nHere, we'll add the following code:\n\n``` jsx\n// üëÜ public routes above üëÜ\napp.use(auth());\n// üëá private routes below üëá\n```\n\nNote the placement of this middleware between the ‚Äú/total‚Äù and ‚Äú/reports‚Äù endpoints. This is significant. \n\nJust like with web applications, some API endpoints are public. Endpoints above the middleware are open to the public while endpoints below require a valid OAuth 2 Access Token.  ",
      "line": 50,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 50,
          "character": 50
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "API Secured!",
      "description": "## API Secured!\nNice work! \n\nWe‚Äôve now set the Expenses API up with express middleware that will require an authorization token before letting anyone view expenses data.\n\nLet's try it out in the next step!"
    },
    {
      "file": "",
      "line": 1,
      "title": "Call the Secured API Without an Access Token",
      "description": "## Call the Secured API Without an Access Token\n\n1. #### Run the Web Application and Expenses API\n    1. Select [here](command:workbench.action.files.saveFiles) to save all this progress.\n    1. Select [here](command:workbench.action.terminal.new) to open your VS Code terminal. (You may already have one open, that's ok.)\n    1. Select [here](command:workbench.action.debug.stop) to stop the previous version of the Web App running in debug, and [here](command:workbench.action.debug.stop) to stop the previous version of the API.\n    1. Select [here](command:workbench.action.debug.start) to build and redeploy the API and Web Application again to reflect the latest changes we made.\n    1. Select [here](command:auth0.lab.openEndpointByName?[\"Lab: Web App, Lab: API\"]) to launch the Web Application and the Expenses API in your web browser.\n\n1. #### Log in to the Web Application and attempt to navigate to Expenses.\n    Interesting - A 401 error!  \n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M06-L01/img-4.png)\n\n    This is expected. The web app is making a call to the API that it is not authorized to access.\n\n    Notice that the home page does not throw an error. This is because we left the ‚Äú/total‚Äù endpoint of the expenses API open to the public. So the web app can still call it to show summary information.\n\n    Similarly, if you attempt to navigate directly to the ‚Äú/reports‚Äù endpoint of the API, you‚Äôll receive an ‚ÄòUnauthorized‚Äô error.  \n\n    This is because we‚Äôve successfully secured the API. Now anyone or any application that wishes to consume the ‚Äú/reports‚Äù endpoint _must_ have a valid Access Token.\n\n    All requests that do not include a valid Access Token (expired token, incorrect scopes, etc.) will return an error instead of the desired data.\n\n\n&nbsp;\n\\\nIn the next section, we'll:\n1. Add the Client Secret to the environment\n1. Configure the Web Application to request an access token\n1. Configure the /expenses and /reports endpoints to use the access token"
    }
  ],
  "nextTour": "4: Client Secrets and Access Tokens"
}