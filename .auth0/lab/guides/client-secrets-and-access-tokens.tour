{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "4: Client Secrets and Access Tokens",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "Add the Client Secret to Your Environment",
      "description": "## Add the Client Secret to Your Environment\nNow letâ€™s use an Access Token to call the Expenses API.\n\nCurrently, the Web Application is set up to perform authentication based on the OpenID Connect standard. \n\nTo access a secured resource like the expenses API, a client needs an Access Token. This will require the application to communicate with the token endpoint on the authorization server.\n\nTo accomplish this, the Web Application will use the Authorization Code Flow. This flow requires full client credentials from a calling application. At this point, we only have the Client ID.\n\nWhat we're missing is a Client Secret.\n\nThe _clientSecret:_ is created on the authorization server (Auth0) along with the Client ID and is a unique string that is used to authenticate an application. \n\nThis secret must be provided in each request when requesting access tokens.  \n\nWe'll retrieve the clientSecret and store it locally in an environment variable called _CLIENT_SECRET_.\n\n1. #### (optional) View the Client Secret in the Auth0 Dashboard. \n    You can find the Client Secret in the Auth0 Dashboard for your tenant. \n\n    1. Browse to it at [Applications page](https://manage.auth0.com/#/applications), and click into your web application's settings.  \n\n    1. On the _Settings_ tab, you can see the _Client Secret_.\n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M06-L01/img-1.png)  \n\n1. #### Retrieve the Client Secret.\n    1. Select [here](command:auth0.lab.localConfigure) to issue a command via the Auth0 extension for vscode and the CLI to reach out to your tenant and retrieve the configuration values for your Web App and Expenses API.\n     1. Select [here](command:workbench.action.files.saveAll) to save all of these changes.\n\nWith the environment now configured with the Client Secret, you're ready to configure the Web Application to request a Token."
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the Expenses Web Application to Request a Token\n\nThe following code will update the auth middleware in our Expenses Web Application to use request an access token for the Expenses API.\n\n``` jsx\n\nauthorizationParams: {\n    response_type: \"code\",\n    audience: \"https://expenses-api\",\n    },\n```\n\n&nbsp;\n\\\nThe **authorizationParams** key allows us to supply OAuth 2 specific request values. We will be returning to this in the future to add more values.",
      "line": 48,
      "selection": {
        "start": {
          "line": 42,
          "character": 30
        },
        "end": {
          "line": 42,
          "character": 35
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## About \"response_type\"\nThe **response_type:** key defines the type of response we want to get back from the authorization endpoint. By default, we have been using a response type of **id_token**.  \n\nUsing the Authorization Code Flow, we need to tell the authorization server we expect back an authorization **code**.  \n\nThus, the value becomes **\"code id_token\"**.",
      "line": 44,
      "selection": {
        "start": {
          "line": 44,
          "character": 1
        },
        "end": {
          "line": 44,
          "character": 38
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## About \"audience\"\nThe **audience:** key specifies the resource we want to gain access to. In this case the Expenses API, so we will use the audience we defined for the Expenses API when we set it up in the Auth0 dashboard. \n\nThus, the value for audience is **\"https://expenses-api\"**.",
      "line": 45,
      "selection": {
        "start": {
          "line": 45,
          "character": 1
        },
        "end": {
          "line": 45,
          "character": 40
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the Reports Endpoint to Use the Access Token\n\nNext, we'll update the Web Application's call to the reports endpoint of the Expenses API (in the expenses route) to use the Access Token to authorize the request.\n\nTo do this, weâ€™ll first get the current Access Token from the request session. Then, weâ€™ll use it in the authorization header of the Axios request.\n\nCompare the code below to what's already in the expenses route. When you've identified the changes, select Insert Code to replace the current block.\n\n```jsx\napp.get(\"/expenses\", requiresAuth(), async (req, res, next) => {\n    try {\n       // ðŸ‘‡ get the token from the request ðŸ‘‡\n       const { token_type, access_token } = req.oidc.accessToken;\n       // ðŸ‘‡ then send it as an authorization header ðŸ‘‡\n       const expenses = await axios.get(`${API_URL}/reports`, {\n         headers: {\n           Authorization: `${token_type} ${access_token}`,\n         },\n       });\n       // ðŸ‘† end of changes ðŸ‘†\n       res.render(\"expenses\", {\n        user: req.oidc && req.oidc.user,\n        expenses: expenses.data,\n    });\n    } catch (err) {\n       next(err);\n    }\n});\n```",
      "line": 105,
      "selection": {
        "start": {
          "line": 77,
          "character": 1
        },
        "end": {
          "line": 87,
          "character": 6
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Nice Work!",
      "description": "## Nice Work!\nThe next time you log in to your web application and attempt to navigate to the expenses, you will see the list of expenses without error. (Be sure that you log out of the app completely before logging back in.)\n\n#### Let's give it a try!\n\n1. #### Run the Web Application and Expenses API.\n    1. Select [here](command:workbench.action.files.saveFiles) to save all this progress.\n    1. Select [here](command:workbench.action.terminal.new) to open your vscode terminal. (You may already have one open, that's ok.)\n    1. Select [here](command:workbench.action.debug.stop) to stop the previous version of the Web App running in debug, and [here](command:workbench.action.debug.stop) to stop the previous version of the API.\n    1. Select [here](command:workbench.action.debug.start) to build and redeploy the Web Application and Expenses API to reflect the latest changes we made.\n    1. Select [here](command:auth0.lab.openEndpointByName?[\"Lab: Web App, Lab: API\"]) to re-launch the Web Application and the Expenses API in your web browser.\n1. #### Log out of the Web App (If you're still logged in.).\n1. #### Log back in, and navigate to the Expenses section.\n\nCongratulations! You should be able to view the expenses, which are now being securely retrieved by the Web Application from the Expenses API!"
    }
  ]
}