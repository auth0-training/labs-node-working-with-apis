{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: Configure the Web Application to Pull Expenses from the API",
  "steps": [
    {
      "file": "README.md",
      "line": 1,
      "title": "What You'll Learn",
      "description": "## You just:\n1. Registered the Expenses API in your Tenant.\n\n## Now you will:\n1. Deploy a test API into the lab environment.\n1. Modify the Web application to call the API.\n1. Obtain a test Access Token.\n1. Call the test API using the Access Token."
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Check the 'src' Folder",
      "description": "## Check the 'src' Folder\nIf you [examine the Explorer pane](command:workbench.explorer.fileView.focus) under `src`, you'll notice that we've added a new `api` folder in addition to the `web-app` folder from previous labs. \n\n*You can navigate to the explorer pane, Auth0 plugin and other areas in VS Code using the Activity bar. Here's a quick intro to the user interface if you need it: [VS Code UI](https://code.visualstudio.com/docs/getstarted/userinterface).*\n\nUp until this point, the expenses that your web-application displays to users have been hard-coded into the application. We're going to change that.\n\nIn the `src` folder, you'll now see an `api` folder containing an entirely different application -- Our new API! \n\nThe first step will be wiring these two applications together. Let's get started!"
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Add the Axios Library to the Expenses Web Application\nNow that you're familiar with the Expenses API, our first task is to require the Axios library in our web application. This library will enable our asynchronous calls to the Expenses API. Start by inserting the following code into the Expenses Web Application to require Axios:\n\n``` jsx\nconst axios = require(\"axios\").default;\n\n```\n\\\n&nbsp;\n\nWith that done, it's time to begin modifying our routes to use Axios to call our API, rather than simply displaying data from the Application file. ",
      "line": 21,
      "selection": {
        "start": {
          "line": 20,
          "character": 30
        },
        "end": {
          "line": 20,
          "character": 30
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## First, Modify the Default Route\nThe default route (\"/\") is the view that anonymous users will see by default when they first encounter our Expenses Web Application. \n\nRight now, the route is referencing values that are hard-coded into the web application. Now, we'll adjust this route to retrieve data from our Expenses API using Axios. We'll also add some error handling. \n\nExamine the code below, and compare it to the code that is already in the application. When you've identified the changes, select Insert Code to replace the old code with the block below.\n\n``` jsx\napp.get(\"/\", async (req, res, next) => {\n    try {\n       const summary = await axios.get(`${API_URL}/total`);\n       res.render(\"home\", {\n        user: req.oidc && req.oidc.user,\n        total: summary.data.total,\n        count: summary.data.count,\n       });\n    } catch (err) {\n       next(err);\n    }\n});\n```\n, then continue to modify the expenses route.",
      "line": 81,
      "selection": {
        "start": {
          "line": 63,
          "character": 1
        },
        "end": {
          "line": 70,
          "character": 4
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Modify the Expenses Route\n\nNow we'll modify the \"/expenses\" route in a similar way. Compare the block below to what's currently in the code. As before, we're adding error handling, and defining the path to the relevant data in our Expenses API.\n\n``` jsx\napp.get(\"/expenses\", requiresAuth(), async (req, res, next) => {\n    try {\n        const expenses = await axios.get(`${API_URL}/reports`);\n        res.render(\"expenses\", {\n           user: req.oidc && req.oidc.user,\n           expenses: expenses.data,\n        });\n    } catch (err) {\n        next(err);\n    }\n});\n```\n, then continue to the next step.",
      "line": 99,
      "selection": {
        "start": {
          "line": 84,
          "character": 1
        },
        "end": {
          "line": 89,
          "character": 4
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Remove the Hard-Coded Expenses Data from the Expenses Web Application\nNow that we've successfully wired our Expenses Web Application to our Expenses API, there's no need to hang on to the hard-coded expense data within the web app. Let's remove this data from our Web Application to keep things clean.\n\nSelect the Insert Code button below to remove the data automatically.\n\n``` jsx \n // This comment will replace the hard-coded expenses data.\n```\n -- continue when you're ready!",
      "line": 61,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 61,
          "character": 30
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Run the Application and API",
      "description": "## Run the Web App and API\nNow that we've connected the Expenses Web Application to our Expenses API, let's run them both and take a look. \n\n1. #### Run the API\n    1. #### Select [here](command:workbench.action.files.saveFiles) to save all this progress.\n    1. #### Select [here](command:auth0.lab.localConfigure) to set your app and API environment configurations (creates `.env` files in `web-app` and `api` folders).\n    1. #### Select [here](command:workbench.action.terminal.new) to open your vscode terminal. (You may already have one open, that's ok)\n    1. #### Select [here](command:workbench.action.debug.start) to build and deploy the Web App and API.\n     1. #### Ensure the ports are public so that the SPA app and API can communicate. Select the ports tab below, then right click each endpoint, and change the port visibility to public. You may see additional ports listed, which you can safely ignore.\n\n        ![](https://cdn.auth0.com/website/auth0/labs/ilt/public-ports.gif)\n    1. #### Select [here](command:auth0.lab.openEndpointByName?[\"Lab: API, Lab: Web App\"]) to launch and view the Web App and API in your web browser.\n    1. #### Since we made the ports public, you may encounter the following warning from GitHub on both your Web App and API tabs:\n        ![](https://cdn.auth0.com/website/a0fun/v2/github-codespaces-dialog.png)\n        \n        Select **Continue** to proceed.\n    1. #### Switch to the tab where your API launched in the browser (the one that just says \"OK\"). Navigate the the /reports endpoint by appending /reports to the end of the URL and pressing Enter.\n\nWhile we've successfully wired our API up, it isn't yet secure since it's available publicly without any authentication.\n\nIn the next steps, you'll change the API to require a properly-scoped Access Token to view.\nTo do this, weâ€™ll make use of an Express authentication middleware used to protect OAuth2 resources, which validates access tokens.  \n\nLet's secure this API!"
    }
  ],
  "nextTour": "3: Secure the Expenses API"
}